#!/usr/bin/env grrovy
/* Declarative pipeline must be enclosed within a pipeline block */
pipeline {
     /*agent section specifies where the entire Pipeline script will execute in the Jenkins environment */
    //agent any
	agent {
	
	label 'master'
	
	}
    
	/* Here we can declare the environemnt variables */
    environment {
      CF_VERSION = '1.0'
      CF_API = ''
      DEPLOY_ENV = "${params.environment}"
   }
    /**
     * tools to auto-install and put on the PATH
     * some of the supported tools - maven, jdk, gradle,git
     */
    tools {
        maven 'maven3.6.3' 
    }
    
    triggers {
     //Poll SCM
     pollSCM('* * * * *')
     //Buid Periodically
     cron('* * * * *')
     //GitHub WebHook
     githubPush()
    
   }
   
   
   // Configure Pipeline-specific options
   options {
      
       // Add timestamps to output
       timestamps()
       overrideIndexTriggers(false)
       // timeout job after 60 minutes
       timeout(time: 3,unit: 'MINUTES')
       // Keep only last 5 builds
       buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5'))
       disableConcurrentBuilds()
   }
 
     /**
     * stages contain one or more stage directives
     */
    stages {
         stage('CheckoutCode') {
             /*agent { 
             label 'master'
             }*/
            steps {
                git branch: 'stage', credentialsId: 'fc8c3d87-2a92-4de9-9e00-c38f5e780b97', url: 'https://github.com/MithunTechnologiesDevOps/maven-web-application.git'
            
                sh "echo CF_VERSION ${CF_VERSION}"
            }
        }
        
        stage('MavenBuild') {
            steps {
               sh 'mvn clean package'
            }
        }
        
        stage ('JaCoCoReport') {
           steps {
                jacoco (buildOverBuild: true, 
                        changeBuildStatus: true, 
                        deltaBranchCoverage: '80', 
                        deltaClassCoverage: '80', 
                        deltaComplexityCoverage: '80', 
                        deltaInstructionCoverage: '80', 
                        deltaLineCoverage: '80', 
                        deltaMethodCoverage: '80', 
                        maximumBranchCoverage: '80', 
                        maximumClassCoverage: '80', 
                        maximumComplexityCoverage: '80', 
                        maximumInstructionCoverage: '80', 
                        maximumLineCoverage: '80', 
                        maximumMethodCoverage: '80', 
                        minimumBranchCoverage: '80', 
                        minimumClassCoverage: '80', 
                        minimumComplexityCoverage: '80', 
                        minimumInstructionCoverage: '80', 
                        minimumLineCoverage: '80', 
                        minimumMethodCoverage: '80', 
                        skipCopyOfSrcFiles: true)
           }  
        }
        
        stage('CreateDirectory') {
            steps {
                dir('/tmp/bhaskar'){
                   sh "touch bhaskar.txt" 
                }
                }
        }
        /*
        stage('SonarQubeReportExecution') {
            steps {
               sh 'mvn sonar: sonar'
            }
        }
        
        stage('UploadArtifactIntoNexus') {
            steps {
               sh 'mvn deploy'
            }
        }
        
      stage('DeployApplicationIntoTomcat') {
            steps {
            // provide SSH credentials to builds via a ssh-agent in Jenkins
              sshagent(['293267cf-8c00-4465-a36f-4ed77134166e']) {
                 sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@3.15.29.188: /opt/tomcat9/webapps/"
               } 
            }
        }
        */
    }
    /*
    /**
     * post section defines actions which will be run at the end of the Pipeline run or stage
     * post section condition blocks: always, changed, failure, success, unstable, and aborted
     */
     
    post {
        always {
            cleanWs()
        }
        success {   
              emailext to: 'devopstrainingblr@gmail.com,mithuntechnologies@yahoo.com',
                       subject: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
	                   body: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
	                   replyTo: 'devopstrainingblr@gmail.com'
			         
            cleanWs()
        }
        failure {
            emailext to: 'devopstrainingblr@gmail.com,mithuntechnologies@yahoo.com',
                     subject: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
	                 body: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
	                 replyTo: 'devopstrainingblr@gmail.com'
		 cleanWs()	 
        }
    }
}